generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  telegramId   String        @unique
  isBot        Boolean       @default(false)
  firstName    String
  lastName     String?
  username     String?
  languageCode String?
  phoneNumber  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  admin        Admin?
  complainants Complainant[]
}

model Admin {
  id          String            @id @default(uuid())
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  hromadas    HromadaAdmin[]
  settlements SettlementAdmin[]
}

model Hromada {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  settlements Settlement[]
  admins      HromadaAdmin[]
}

model HromadaAdmin {
  admin     Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   String
  hromada   Hromada @relation(fields: [hromadaId], references: [id], onDelete: Cascade)
  hromadaId Int

  @@id([adminId, hromadaId])
}

model Settlement {
  id        Int               @id @default(autoincrement())
  name      String
  hromadaId Int
  hromada   Hromada           @relation(fields: [hromadaId], references: [id], onDelete: Cascade)
  admins    SettlementAdmin[]
  complains Complaint[]

  @@unique([hromadaId, name])
}

model SettlementAdmin {
  admin        Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId      String
  settlement   Settlement @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  settlementId Int

  @@id([adminId, settlementId])
}

model Complainant {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  telegramId  String
  username    String?
  fullName    String?
  phoneNumber String?
  complaintId String    @unique
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
}

model Complaint {
  id           String              @id @default(uuid())
  settlementId Int
  settlement   Settlement          @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  complainant  Complainant?
  shelterName  String
  reasonType   ComplaintReasonType
  reason       String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
}

enum ComplaintReasonType {
  CLOSED_SHELTER
  NOT_ALLOWED_TO_ENTER
  ABSENT_SHELTER
  OTHER
}
