generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  telegramId   String  @unique
  isBot        Boolean @default(false)
  firstName    String
  lastName     String?
  username     String?
  languageCode String?
  phoneNumber  String?
  admin        Admin?
}

model Admin {
  id        String @id @default(uuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  districts Int[]
}

model Shelter {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  district   Int         @default(0)
  complaints Complaint[]
}

model Complainant {
  id          String      @id @default(uuid())
  telegramId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  username    String?
  fullName    String?
  phoneNumber String?
  complaints  Complaint[]
}

model Complaint {
  id            String            @id @default(uuid())
  shelterId     String
  shelter       Shelter           @relation(fields: [shelterId], references: [id], onDelete: Cascade)
  complainantId String
  complainant   Complainant       @relation(fields: [complainantId], references: [id], onDelete: Cascade)
  reasons       ComplaintReason[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model ComplaintReason {
  id          String              @id @default(uuid())
  complaintId String
  complaint   Complaint           @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  type        ComplaintReasonType
  reason      String?
}

enum ComplaintReasonType {
  CLOSED_SHELTER
  NOT_ALLOWED_TO_ENTER
  ABSENT_SHELTER
  OTHER
}
